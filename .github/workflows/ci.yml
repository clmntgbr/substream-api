name: CI
on:
  push:
    branches:
      - main
  pull_request: ~
  workflow_dispatch: ~
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Create .env file for CI
        run: |
          cat > .env << EOF
          # CI Environment Configuration
          APP_ENV=test
          APP_SECRET=ci-secret-key-for-testing
          SERVER_NAME=localhost
          
          # Database
          DATABASE_URL="postgresql://postgres:postgres@database:5432/postgres?serverVersion=16&charset=utf8"
          POSTGRES_DB=postgres
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          
          # RabbitMQ
          RABBITMQ_USER=guest
          RABBITMQ_PASS=guest
          RABBITMQ_VHOST=/
          
          # MinIO Configuration
          MINIO_ROOT_USER=minioadmin
          MINIO_ROOT_PASSWORD=minioadmin123
          MINIO_USER=substream
          MINIO_PASSWORD=substream123
          S3_BUCKET_NAME=substream-bucket
          
          # JWT
          CADDY_MERCURE_JWT_SECRET=!ChangeThisMercureHubJWTSecretKey!
          CADDY_MERCURE_URL=http://php/.well-known/mercure
          CADDY_MERCURE_PUBLIC_URL=https://localhost/.well-known/mercure
          
          # Project
          PROJECT_NAME=substream
          
          # Ports
          HTTP_PORT=80
          HTTPS_PORT=443
          HTTP3_PORT=443
          
          # XDebug
          XDEBUG_MODE=off
          EOF
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build Docker images
        uses: docker/bake-action@v5
        with:
          pull: true
          load: true
          files: |
            compose.yaml
            compose.override.yaml
          set: |
            *.cache-from=type=gha,scope=${{github.ref}}
            *.cache-from=type=gha,scope=refs/heads/main
            *.cache-to=type=gha,scope=${{github.ref}},mode=max
      - 
        name: Create external network
        run: docker network create substream-network || true
      -
        name: Start services
        run: docker compose up --wait --no-build
      -
        name: Install dependencies and setup application
        run: |
          echo "Installing Composer dependencies..."
          docker compose exec -T php composer install --no-interaction --prefer-dist --optimize-autoloader
          echo "Clearing cache..."
          docker compose exec -T php php bin/console cache:clear --env=test
          echo "Creating database..."
          docker compose exec -T php php bin/console doctrine:database:create --if-not-exists --env=test
          echo "Running migrations..."
          docker compose exec -T php php bin/console doctrine:migrations:migrate --no-interaction --env=test
      -
        name: Check container health
        run: |
          echo "Checking all container status..."
          docker compose ps
          echo "Checking database container logs..."
          docker compose logs database --tail=50
          echo "Checking PHP container logs..."
          docker compose logs php --tail=100
          echo "Checking MinIO container status..."
          docker compose ps minio
          echo "Checking MinIO logs..."
          docker compose logs minio --tail=50
          echo "Checking MinIO setup logs..."
          docker compose logs minio-setup --tail=50
      -
        name: Check HTTP reachability
        run: curl -v --fail-with-body http://localhost
      -
        name: Check HTTPS reachability
        if: false # Remove this line when the homepage will be configured, or change the path to check
        run: curl -vk --fail-with-body https://localhost
      -
        name: Check Mercure reachability
        run: curl -vkI --fail-with-body https://localhost/.well-known/mercure?topic=test
      -
        name: Create test database
        if: false # Remove this line if Doctrine ORM is installed
        run: docker compose exec -T php bin/console -e test doctrine:database:create
      -
        name: Run migrations
        if: false # Remove this line if Doctrine Migrations is installed
        run: docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
      -
        name: Run PHPUnit
        if: false # Remove this line if PHPUnit is installed
        run: docker compose exec -T php bin/phpunit
      -
        name: Doctrine Schema Validator
        if: false # Remove this line if Doctrine ORM is installed
        run: docker compose exec -T php bin/console -e test doctrine:schema:validate
  lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile